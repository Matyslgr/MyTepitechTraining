{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      inputImage: null,\n      outputText: null,\n      selectedImage: null,\n      selectedType: null,\n      loading: false\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.inputImage = event.target.files[0];\n      this.selectedImage = URL.createObjectURL(this.inputImage);\n      this.outputText = null;\n    },\n    processImage(type) {\n      this.loading = true;\n      this.selectedType = type;\n      const formData = new FormData();\n      formData.append('file', this.inputImage);\n      formData.append('type', this.selectedType);\n      fetch('http://localhost:5000/process_image', {\n        method: 'POST',\n        body: formData\n      }).then(response => response.json()).then(data => {\n        if (data.error) {\n          console.error('Error processing image:', data.error);\n        } else {\n          this.outputText = data.processed_text;\n        }\n      }).catch(error => {\n        console.error('Error processing image:', error);\n      }).finally(() => {\n        this.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","inputImage","outputText","selectedImage","selectedType","loading","methods","handleFileChange","event","target","files","URL","createObjectURL","processImage","type","formData","FormData","append","fetch","method","body","then","response","json","error","console","processed_text","catch","finally"],"sources":["src/components/HelloWorld.vue"],"sourcesContent":["<template>\n  <main>\n    <section class=\"image-processing-section\">\n      <div class=\"content-container\">\n        <label for=\"file-input\" class=\"file-label\">Choisir une image</label>\n        <input id=\"file-input\" type=\"file\" @change=\"handleFileChange\" class=\"file-input\">\n        <div class=\"action-buttons\">\n          <button class=\"btn btn-success\" @click=\"processImage('text')\">Texte</button>\n          <button class=\"btn btn-primary\" @click=\"processImage('hole')\">Texte Ã  trou</button>\n        </div>\n      </div>\n    </section>\n    <img :src=\"selectedImage\" alt=\"Processed Image\" v-if=\"selectedImage\" class=\"processed-image\">\n    <section v-if=\"loading\" class=\"output-container\">\n      <p class=\"loading-indicator\" >Loading...</p>\n      <div class=\"loader\"></div>\n    </section>\n    <section v-if=\"outputText\" class=\"output-container\">\n      <p class=\"output-text\" >{{ outputText }}</p>\n    </section>\n  </main>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      inputImage: null,\n      outputText: null,\n      selectedImage: null,\n      selectedType: null,\n      loading: false\n    };\n  },\n  methods: {\n    handleFileChange(event) {\n      this.inputImage = event.target.files[0];\n      this.selectedImage = URL.createObjectURL(this.inputImage);\n      this.outputText = null;\n    },\n    processImage(type) {\n      this.loading = true;\n      this.selectedType = type;\n      const formData = new FormData();\n      formData.append('file', this.inputImage);\n      formData.append('type', this.selectedType);\n\n      fetch('http://localhost:5000/process_image', {\n        method: 'POST',\n        body: formData\n      })\n      .then(response => response.json())\n      .then(data => {\n        if (data.error) {\n          console.error('Error processing image:', data.error);\n        } else {\n          this.outputText = data.processed_text;\n        }\n      })\n      .catch(error => {\n        console.error('Error processing image:', error);\n      })\n      .finally(() => {\n        this.loading = false;\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n  template {\n    background: linear-gradient(to right, #36D1DC, #5B86E5);\n    margin: 0;\n    font-family: 'Arial', sans-serif;\n    color: #fff; /* Couleur du texte sur le fond */\n  }\n\n  .image-processing-section {\n    max-width: 400px;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: rgba(255, 255, 255, 0.8);\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n  }\n\n  .file-input {\n    opacity: 0;\n    position: absolute;\n    z-index: -1;\n  }\n\n  .file-label {\n    cursor: pointer;\n    display: inline-block;\n    padding: 10px 15px;\n    background-color: #ff4219;\n    color: #fff;\n    border: none;\n    border-radius: 4px;\n  }\n\n  .content-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n  }\n\n  .action-buttons {\n    margin-top: 15px;\n  }\n\n  .btn {\n    padding: 10px 15px;\n    margin-right: 10px;\n    cursor: pointer;\n    border-radius: 4px;\n  }\n\n  .btn- {\n    background-color: #28a745;\n    color: #fff;\n  }\n\n  .btn-primary {\n    background-color: #007bff;\n    color: #fff;\n  }\n\n  .loading-indicator {\n    text-align: center;\n    margin-top: 20px;\n  }\n\n  .processed-image {\n    max-width: 100%;\n    margin-top: 15px;\n    border: 4px solid #fff;\n    border-radius: 8px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n  }\n\n  .output-container {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: rgba(255, 255, 255, 0.9);\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n    text-align: center;\n  }\n\n  .output-text {\n    animation-duration: 3s;\n    animation-name: slidein;\n    font-size: 18px;\n    color: #333;\n  }\n  @keyframes slidein {\n    from {\n      margin-left: 100%;\n      width: 300%;\n    }\n\n    to {\n      margin-left: 0%;\n      width: 100%;\n    }\n  }\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  .loader {\n    border: 8px solid #f3f3f3; /* Gris clair */\n    border-top: 8px solid #3498db; /* Bleu */\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    animation: spin 1s linear infinite;\n    margin: 0 auto;\n    margin-top: 20px;\n  }\n\n  button {\n    background: none;\n    border: 2px solid;\n    font: inherit;\n    line-height: 1;\n    margin: 0.5em;\n    padding: 1em 2em;\n  }\n  .raise {\n    position: relative;\n    overflow: hidden;\n    transition: box-shadow 0.3s ease-out, transform 0.3s ease-out;\n  }\n\n  .raise::before {\n    content: \"\";\n    position: absolute;\n    z-index: -1;\n    width: 100%;\n    height: 100%;\n    background-color: var(--hover);\n    box-shadow: 0 0.5em 0.5em -0.4em var(--hover);\n    transform: translateY(0.25em);\n    transition: box-shadow 0.3s ease-out, transform 0.3s ease-out;\n  }\n\n  .raise:hover,\n  .raise:focus {\n    box-shadow: 0 0 0 2em transparent;\n    transform: translateY(-0.25em);\n  }\n\n  .raise:hover::before,\n  .raise:focus::before {\n    box-shadow: 0 0.5em 0.5em -0.4em transparent;\n    transform: translateY(0);\n  }\n\n</style>\n"],"mappings":";;;AAwBA;EACAA,KAAA;IACA;MACAC,UAAA;MACAC,UAAA;MACAC,aAAA;MACAC,YAAA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAAC,KAAA;MACA,KAAAP,UAAA,GAAAO,KAAA,CAAAC,MAAA,CAAAC,KAAA;MACA,KAAAP,aAAA,GAAAQ,GAAA,CAAAC,eAAA,MAAAX,UAAA;MACA,KAAAC,UAAA;IACA;IACAW,aAAAC,IAAA;MACA,KAAAT,OAAA;MACA,KAAAD,YAAA,GAAAU,IAAA;MACA,MAAAC,QAAA,OAAAC,QAAA;MACAD,QAAA,CAAAE,MAAA,cAAAhB,UAAA;MACAc,QAAA,CAAAE,MAAA,cAAAb,YAAA;MAEAc,KAAA;QACAC,MAAA;QACAC,IAAA,EAAAL;MACA,GACAM,IAAA,CAAAC,QAAA,IAAAA,QAAA,CAAAC,IAAA,IACAF,IAAA,CAAArB,IAAA;QACA,IAAAA,IAAA,CAAAwB,KAAA;UACAC,OAAA,CAAAD,KAAA,4BAAAxB,IAAA,CAAAwB,KAAA;QACA;UACA,KAAAtB,UAAA,GAAAF,IAAA,CAAA0B,cAAA;QACA;MACA,GACAC,KAAA,CAAAH,KAAA;QACAC,OAAA,CAAAD,KAAA,4BAAAA,KAAA;MACA,GACAI,OAAA;QACA,KAAAvB,OAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}